#!/usr/bin/env bash
#
# ############################################################################
# Project: polybarctl (vundefined)
# File...: polybar.lib
# Created: Monday, 2023/03/06 - 01:29:51
# Author.: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Last Modified: Sunday, 2023/03/19 - 15:57:21
# Modified By..: @fbnmtz, (fabiano.matoz@gmail.com)
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Version: 0.0.14.362
# ~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~·~·~·~·~·~·~·~~·~·~·~·~·~~·~·~·~·~·~·~·~
# Description: 
#  >
# ############################################################################
# HISTORY:
#

_xLIB_POLYBAR_=true

PHOME="$HOME/.config/polybar"

xrequirements mkdir mv rm touch ls cat rev cut killall pgrep wc grep tr

is_installed(){
  [ -f "$PHOME/polybarctl" ] && return 0 || return 1
}

pInstall(){
  local themes_repo=https://github.com/adi1090x/polybar-themes
  local tmp=/tmp/polybar-themes
  
  if [ ! -f "$PHOME/polybarctl" ]; then
    echo -e "installing polybarctl"
    touch "$PHOME"/polybarctl
    
    echo -e "downloading themes"
    git clone "$themes_repo" "$tmp"
    ls -d $tmp/simple/* > "$PHOME"/polybarctl
    mv $tmp/simple/* "$PHOME"/ 
    mv $tmp/wallpapers/ "$PHOME"/
    
    echo -e "install fonts"
    [ ! -d "$HOME/.local/fonts" ] && mkdir -p "$HOME"/.local/fonts
    mv $tmp/fonts/* "$HOME/.local/fonts/"

    echo -e "remove temporary files"
    rm -rf $tmp
  else 
    echo -e "${RED}Error! 'polybar-themes' already installed${RESET}"
  fi
}

pList(){
  # function to print a formatted msg
  print_msg(){
    # shellcheck disable=2034   # declare and assing var
    local text=$1; local selected_color=${2:-$YELLOW}
    echo -e "${selected_color} $1${RESET}"
  }

  # get last item on a line sepated by '/'
  last_item(){
    echo "$1" | rev | cut -d '/' -f1 | rev
  }
  
  # cmd to list all saved themes
  local cmd="cat $PHOME/polybarctl | grep -v 'launch.sh'"
  
  # check if polybarctl is already installed
  if is_installed; then

    THEMES=$(eval "$cmd" 2> /dev/null)
    print_msg "\n${BLUE}-> Available themes: ${GREEN}($( eval "$cmd" | wc -l))${RESET}"
    
    for t in $THEMES; do
      _current_theme=$(last_item "$t")
      if [ "$_current_theme" != "panels" ]; then
        print_msg " * $_current_theme"
      else
        print_msg " * $_current_theme"
        for p in "$PHOME/$_current_theme"/panel/*; do
          print_msg "   \`-> $(last_item "${p//.ini/}")" "$CYAN"
        done
      fi
    done
  else
    echo -e "${RED}Error! themes not installed yet.${RESET}"
  fi
}

pUninstall(){
  if is_installed; then
    local toRemove=$(cat "$PHOME/polybarctl" | rev | cut -d '/' -f1 | rev)
    for item in $toRemove; do
      echo "rm -rf $PHOME/$item"
      rm -rf "$PHOME/$item"
    done
    for item in themes wallpapers polybarctl; do
      rm -rf "$PHOME/$item"
    done
    echo "$APP: themes uninstalled"
  else
    echo -e "${RED}Error! Unable to uninstall (not installed).${RESET}"
  fi
}

pQuit(){
  # Terminate already running bar instances
	killall -q polybar

	# Wait until the processes have been shut down
	while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
}

pRun(){
  local theme=$1    # current theme
  local ttype=''    # theme type (dir or file) -> panels theme
  local subtheme='' # used to run subitems -> panels theme
  
  _theme_exists(){
    if [ -d "$PHOME/$theme" ]; then 
      ttype=d
      true
      return 0 
    else
      subtheme="$(echo "$theme" | cut -d '/' -f2)"
      if [ -f "$PHOME/panels/panel/$subtheme.ini" ]; then
        ttype=f
        true
        return 0
      else
        return 1
      fi
    fi
  }
  
  _get_bars(){
    case "$ttype" in
      d) grep "bar/" "$PHOME/$theme"/config.ini | grep -v '=' | cut -d '/' -f2 | tr -d ']'  ;; 
      f) grep "bar/" "$PHOME/panels/panel/$subtheme.ini" | grep -v '=' | cut -d '/' -f2 | tr -d ']' 
    esac
  }
  
  # themes installed?
  if is_installed; then
    # this is a valid theme?
    if _theme_exists "$theme"; then
      # kill all polybar instances
      pQuit
      echo -e "starting bars:\n'$(_get_bars)'"
      # run all bars defined in theme
      for bar in $(_get_bars); do
        case "$ttype" in
          d) polybar -q "$bar" -c "$PHOME"/"$theme"/config.ini &         ;;
          f) polybar -q "$bar" -c "$PHOME/panels/panel/$subtheme.ini" &  ;;
        esac
      done
    else
        echo -e "${RED}Error! theme '$theme' not found.${RESET}"
    fi
  else
    # is a file? try to run polybar
    if [ -f "$theme" ]; then
      polybar -c "$theme" "$bar" &
    else
      # not a valid file either? Write error message
      echo -e "${RED}Error! Themes isn't installed. Configfile '$theme' not found.${RESET}"
    fi
  fi
  
}
